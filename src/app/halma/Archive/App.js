/**
 * This document is used to generate the neighbors of each tile in the board.
 * Plan: Generate the nodes [] to get each  attribute (x,y, neighbor, targetNeighbor) of each node
 */
const stringToIndex2 = {
  "0,12": 0,
  "1,11": 1,
  "1,13": 2,
  "2,10": 3,
  "2,12": 4,
  "2,14": 5,
  "3,9": 6,
  "3,11": 7,
  "3,13": 8,
  "3,15": 9,
  "4,0": 10,
  "4,2": 11,
  "4,4": 12,
  "4,6": 13,
  "4,8": 14,
  "4,10": 15,
  "4,12": 16,
  "4,14": 17,
  "4,16": 18,
  "4,18": 19,
  "4,20": 20,
  "4,22": 21,
  "4,24": 22,
  "5,1": 23,
  "5,3": 24,
  "5,5": 25,
  "5,7": 26,
  "5,9": 27,
  "5,11": 28,
  "5,13": 29,
  "5,15": 30,
  "5,17": 31,
  "5,19": 32,
  "5,21": 33,
  "5,23": 34,
  "6,2": 35,
  "6,4": 36,
  "6,6": 37,
  "6,8": 38,
  "6,10": 39,
  "6,12": 40,
  "6,14": 41,
  "6,16": 42,
  "6,18": 43,
  "6,20": 44,
  "6,22": 45,
  "7,3": 46,
  "7,5": 47,
  "7,7": 48,
  "7,9": 49,
  "7,11": 50,
  "7,13": 51,
  "7,15": 52,
  "7,17": 53,
  "7,19": 54,
  "7,21": 55,
  "8,4": 56,
  "8,6": 57,
  "8,8": 58,
  "8,10": 59,
  "8,12": 60,
  "8,14": 61,
  "8,16": 62,
  "8,18": 63,
  "8,20": 64,
  "9,3": 65,
  "9,5": 66,
  "9,7": 67,
  "9,9": 68,
  "9,11": 69,
  "9,13": 70,
  "9,15": 71,
  "9,17": 72,
  "9,19": 73,
  "9,21": 74,
  "10,2": 75,
  "10,4": 76,
  "10,6": 77,
  "10,8": 78,
  "10,10": 79,
  "10,12": 80,
  "10,14": 81,
  "10,16": 82,
  "10,18": 83,
  "10,20": 84,
  "10,22": 85,
  "11,1": 86,
  "11,3": 87,
  "11,5": 88,
  "11,7": 89,
  "11,9": 90,
  "11,11": 91,
  "11,13": 92,
  "11,15": 93,
  "11,17": 94,
  "11,19": 95,
  "11,21": 96,
  "11,23": 97,
  "12,0": 98,
  "12,2": 99,
  "12,4": 100,
  "12,6": 101,
  "12,8": 102,
  "12,10": 103,
  "12,12": 104,
  "12,14": 105,
  "12,16": 106,
  "12,18": 107,
  "12,20": 108,
  "12,22": 109,
  "12,24": 110,
  "13,9": 111,
  "13,11": 112,
  "13,13": 113,
  "13,15": 114,
  "14,10": 115,
  "14,12": 116,
  "14,14": 117,
  "15,11": 118,
  "15,13": 119,
  "16,12": 120,
};

const board = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
  [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
  [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];

function pixelLocations(n, r, s, o) {
  let a = (2 * Math.PI) / 6;
  for (let l = 0; l < 6; l++) {
    let d = r + o * Math.cos(l * a),
      h = s + o * Math.sin(l * a);
    l === 0 ? n.moveTo(d, h) : n.lineTo(d, h);
  }
}
function getHexStyle(y, x) {
  return {
    left: 0 + (y * 25) / 1.7,
    top: 100 + (x * 45) / 1.7,
  };
}

let tilesWithAttributes = [];

let runningIndex = 0;
board.forEach((row, rowIndex) => {
  row.forEach((value, columnIndex) => {
    if (value === 1) {
      let neighborsOfTiles = [];
      for (const neighborIndex of [
        [rowIndex - 1, columnIndex + 1],
        [rowIndex + 0, columnIndex - 2],
        [rowIndex - 1, columnIndex - 1],
        [rowIndex + 1, columnIndex + 1],
        [rowIndex + 0, columnIndex + 2],
        [rowIndex + 1, columnIndex - 1],
      ]) {
        const newX = neighborIndex[0];
        const newY = neighborIndex[1];
        if (
          newX >= 0 &&
          newX < board.length &&
          newY >= 0 &&
          newY < row.length &&
          board[newX][newY] === 1
        ) {
          neighborsOfTiles.push(stringToIndex2[newX + "," + newY]);
        }
      }
      const pixelLocations3 = getHexStyle(columnIndex, rowIndex);
      tilesWithAttributes.push({
        x: rowIndex,
        y: columnIndex,
        neighbors: neighborsOfTiles,
        leftPixel: pixelLocations3.left,
        topPixel: pixelLocations3.top,
      });
      runningIndex++;
    }
  });
});

tilesWithAttributes.forEach((tile) => {
  console.log(tile);
});
